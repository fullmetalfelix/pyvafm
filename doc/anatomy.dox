/*! \page page_anatomy Anatomy of a Simulation


Anatomy of a Simulation
===============

In this section we will describe in very general terms how the PyVAFM will work. Work flow for every PyVAFM simulation will follow more or less the same steps. 


\image html WorkFlow.png "WorkFlow"


The Input Script
-----------------


Here an example input script is demonstrated;



~~~~~~~~~~~~~{.py}
##!/usr/bin/env python
import sys
sys.path.append('/Users/johntracey/Desktop/pyvafm-master/src')
from vafmbase import ChannelType
from vafmcircuits import Machine
import vafmcircuits

 #Initalise the PyVAFM Core
machine = Machine(name='machine', dt=0.0001, pushed=True)
	
machine.AddCircuit(type='waver',name='wave', amp=1, freq=2, phi=1, offset=2.0, pushed=True) # adding a circuit

machine.AddCircuit(type='square',name='sqw', amp=1.5, freq=2, offset=0.0, duty=0.2, pushed=True ) # adding another circuit

machine.AddCircuit(type='opAdd',name='Add', pushed=True )

machine.Connect("wave.sin","Add.in1")	#connect a sin wave to the add circuits input 1
machine.Connect("wave.sin","Add.in2")	#connect a sin wave to the add circuits input 2

out1 = machine.AddCircuit(type='output',name='output',file='wavers.log', dump=1)
out1.Register('global.time', 'wave.sin', 'wave.cos', 'wave.saw', 'sqw.out',"Add.out")
	
machine.Wait(1) #telling the simulation to wait for 1 second
~~~~~~~~~~~~~



It may look a bit of a mess right now but each part does follow a common pattern, I wont go into to much detail here but a general overview of each part of the code will be presented:



~~~~~~~~~~~~~{.py}
machine = Machine(name='machine', dt=0.0001, pushed=True)
~~~~~~~~~~~~~

This part of the code is required for all input scripts, it essentially sets up the PyVAFM and should alwyas be included first. As well as setting up the PyVAFM this also lets you define the timestep for the simulation, in this case it is set as dt=0.001, finally you can decide if the machine is pushed or not, again more detail on what pushing in the Circuits User Guide section.


~~~~~~~~~~~~~{.py}
machine.AddCircuit(type='waver',name='wave', amp=1, freq=2, phi=1, offset=2.0, pushed=True)
~~~~~~~~~~~~~

This is the command used to add a circuit to the PyVAFM system. The details of the nature of these circuits will be demonstrated in section 4 but for now lets just consider a general form. A circuit is simply a black box that takes input and produces an output. The idea is that these black boxes simulate some process and are then connected together to build the simulation. Circuits are named separately and may have initialisation parameters like this one. this particular circuit outputs waves such as sin, cos etc. So we have assigned the type of circuit as 'waver', the name of the circuit as 'wave' and initialisation parameters amplitude (amp), frequency (freq), phi and offset. This has been a very loose explnation on how the circuits work but this is covered in more detail in the Circuits User Guide section. 

~~~~~~~~~~~~~{.py}
machine.Connect("wave.sin","Add.in1")
~~~~~~~~~~~~~

This is how you connect circuits, you must connect the output of one circuit to the input of another for example in this case the circuit named wave with the output sin (wave.sin) is connected to circuit named Add that has the input in1 (Add.in1), Again more details in the Circuits User Guide.

~~~~~~~~~~~~~{.py}
out1 = machine.AddCircuit(type='output',name='output',file='wavers.log', dump=1)
out1.Register('global.time', 'wave.sin', 'wave.cos', 'wave.saw', 'sqw.out',"Add.out")
~~~~~~~~~~~~~

This is the output circuit, it follows the same pattern as the add circuits described before. It contains the type of circuit, the name and two initialisation parameters namely file and dump. More details on the output circuit can be found in section 4.4.1. The 2nd part of this output command is the .Register part. Some circuits require additional inputs for example here this additional input is used to register channel names to be outputted by the output circuit.
\linebreak

~~~~~~~~~~~~~{.py}
machine.Wait(1)
~~~~~~~~~~~~~

This command simply tells the simulation to wait for 1 second, the simulation will then run for one second and end during this time the calculation are run for the circuits that have been added.


*/
